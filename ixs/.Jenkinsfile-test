pipeline {
    agent any
    parameters {
        string(name: 'TAG_VERSION', defaultValue:  '0.0.0', description: 'tag版本')
        choice choices: ['node'], description: '部署方式', name: 'APP_DEPLOY_TYPE'
    }

    triggers {
        gitlab(triggerOnPush: true, triggerOnMergeRequest: true, branchFilterType: 'All')
    }

    stages {
        stage('check auto build'){
            steps {
                script {
                    wrap([$class: 'BuildUser']) {
                        try {
                            echo "${BUILD_USER}"
                        }catch(e){
                            echo 'no auto build'
                            currentBuild.result = "ABORTED"
                            sh 'curl -n -X POST ${BUILD_URL}doDelete'
                            error
                        }
                    }
                }
            }
        }
        stage('up jenkins desc'){
            steps {
                script {
                    if (TAG_VERSION == "0.0.0"){
                        currentBuild.displayName="${BUILD_NUMBER}"
                    }else{
                        currentBuild.displayName="${TAG_VERSION}"
                    }
                    sh '${JENKINS_SHELL_PATH}/git.sh'
                }
            }
        }
        stage('npm something'){
            steps {
                script{
                    sh '${JENKINS_SHELL_PATH}/node.sh'
                }
            }
        }
        stage('backup code') {
            steps {
                script {
                    if (TAG_VERSION == "0.0.0"){
                        echo 'TAG_VERSION为0.0.0，不备份'
                    }else{
                        echo '备份'
                        sh '${JENKINS_SHELL_PATH}/backup.sh'
                        sh 'bash ${JENKINS_SHELL_PATH}/update-config.sh'
                    }
                }
            }
        }
        stage('release code') {
            steps {
                script {
                    sh '${JENKINS_SHELL_PATH}/release-${APP_DEPLOY_TYPE}.sh'
                }
            }
        }
    }

    post {
        success {
            script {
                def status = "SUCCESS"
                try {
                     wrap([$class: 'BuildUser']) {
                        sh "bash ${JENKINS_SHELL_PATH}/send-dingding.sh '${status}' ${BUILD_USER} 本次发布成功"
                    }
                }catch(e){
                        sh "bash ${JENKINS_SHELL_PATH}/send-dingding.sh '${status}' jenkins 本次发布成功"
                }
            }
        }
        failure {
            script {
                def status = "FAILED"
                try {
                     wrap([$class: 'BuildUser']) {
                        sh "bash ${JENKINS_SHELL_PATH}/send-dingding.sh '${status}' ${BUILD_USER}"
                    }
                }catch(e){
                        sh "bash ${JENKINS_SHELL_PATH}/send-dingding.sh '${status}' jenkins"
                }
            }
        }
    }
}
